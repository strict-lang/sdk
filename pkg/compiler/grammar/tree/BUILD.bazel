load("@io_bazel_rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "go_default_library",
    srcs = [
        "assert_statement.go",
        "assign_statement.go",
        "binary_expression.go",
        "block_statement.go",
        "call_argument.go",
        "call_expression.go",
        "class_declaration.go",
        "concrete_type_name.go",
        "conditional_statement.go",
        "constructor_declaration.go",
        "create_expression.go",
        "empty_statement.go",
        "expression.go",
        "expression_statement.go",
        "field_declaration.go",
        "field_select_expression.go",
        "for_each_loop_statement.go",
        "generic_type_name.go",
        "identifier.go",
        "import_statement.go",
        "invalid_statement.go",
        "list_select_expression.go",
        "list_type_name.go",
        "literal.go",
        "match.go",
        "method_declaration.go",
        "node.go",
        "number_literal.go",
        "parameter.go",
        "postfix_expression.go",
        "ranged_loop_statement.go",
        "resolved_type.go",
        "return_statement.go",
        "statement.go",
        "string_literal.go",
        "test_statement.go",
        "translation_unit.go",
        "type_name.go",
        "unary_expression.go",
        "visitor.go",
        "wildcard_node.go",
        "yield_statement.go",
    ],
    importpath = "gitlab.com/strict-lang/sdk/pkg/compiler/grammar/tree",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/compiler/grammar/token:go_default_library",
        "//pkg/compiler/input:go_default_library",
    ],
)

go_test(
    name = "go_default_test",
    srcs = [
        "assert_statement_test.go",
        "assign_statement_test.go",
        "binary_expression_test.go",
        "block_statement_test.go",
        "call_argument_test.go",
        "call_expression_test.go",
        "class_declaration_test.go",
        "concrete_type_name_test.go",
        "conditional_statement_test.go",
        "constructor_declaration_test.go",
        "create_expression_test.go",
        "empty_statement_test.go",
        "expression_statement_test.go",
        "field_declaration_test.go",
        "field_select_expression_test.go",
        "for_each_loop_statement_test.go",
        "generic_type_name_test.go",
        "identifier_test.go",
        "import_statement_test.go",
        "invalid_statement_test.go",
        "list_select_expression_test.go",
        "list_type_name_test.go",
        "match_test.go",
        "method_declaration_test.go",
        "node_test.go",
        "number_literal_test.go",
        "parameter_test.go",
        "postfix_expression_test.go",
        "ranged_loop_statement_test.go",
        "return_statement_test.go",
        "string_literal_test.go",
        "test_statement_test.go",
        "translation_unit_test.go",
        "unary_expression_test.go",
        "visitor_test.go",
        "wildcard_node_test.go",
        "yield_statement_test.go",
    ],
    embed = [":go_default_library"],
    deps = [
        "//pkg/compiler/grammar/token:go_default_library",
        "//pkg/compiler/input:go_default_library",
    ],
)

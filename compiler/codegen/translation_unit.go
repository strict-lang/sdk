package codegen

import (
	"fmt"
	"github.com/BenjaminNitschke/Strict/compiler/ast"
	"strings"
)

func (generator *CodeGenerator) GenerateTranslationUnit(unit *ast.TranslationUnit) {
	headerNameMacro := fmt.Sprintf("GENERATED_%s_HH_", strings.ToUpper(unit.Name()))
	generator.Emit("// This code was generated by the strict compiler. DO NO CHANGE!\n")
	generator.Emitf("#ifndef %s\n", headerNameMacro)
	generator.Emitf("#define %s\n", headerNameMacro)
	generator.Emit("\n#include <strict/all.hh>\n\n")
	methods, others := splitTopLevelNodes(unit)
	for _, method := range methods {
		method.Accept(generator.generators)
	}
	generator.GenerateMainMethod(others)

	generator.Emitf("\n\n#endif // %s", headerNameMacro)
}

func splitTopLevelNodes(unit *ast.TranslationUnit) (methods []ast.Node, others []ast.Node) {
	for _, node := range unit.Children {
		if _, ok := node.(*ast.Method); ok {
			methods = append(methods, node)
		} else {
			others = append(others, node)
		}
	}
	return methods, others
}

func (generator *CodeGenerator) GenerateMainMethod(nodes []ast.Node) {
	generator.Emit("int main(int argc, char **argv) ")
	block := &ast.BlockStatement{
		Children: nodes,
	}
	block.Accept(generator.generators)
}

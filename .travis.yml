language: go

go:
  - 1.13.x

git:
  depth: 1

cache: 
  directories:
    - output/
    - vendor/
    - ${GOPATH}/bin
    - /usr/local/go

notifications:
  email: false

addons:
  apt:

stages: [test, build, bundle]

install:
  - go version
  - go get -d -v all
  - go install ./cmd/strict_sdk

jobs:
  include:
    # Builds the executable binary and saves it to a location, where it is later accessed by
    # the bundle step. Platform and architecture are configured in the build matrix.
    - stage: build
      name: build
      script: go build -o ./output/$TRAVIS_BRANCH/$STRICT_PLATFORM/$STRICT_ARCHITECTURE/strict ./cmd/strict 
    # Bundles a Strict SDK by using the executable built in the 'build' stage and deploys it to
    # the Github releases. The $GITHUB_OAUTH_TOKEN has to be defined.
    - stage: bundle
      name: bundle
      os: linux
      env: 
        - EXECUTABLE_PATH=./output/$TRAVIS_BRANCH/$STRICT_PLATFORM/$STRICT_ARCHITECTURE/strict
        - RESULT_FILE=sdk-$TRAVIS_BRANCH-$STRICT_PLATFORM-$STRICT_ARCHITECTURE.tar.gz
        - RESULT_DIRECTORY=output/$TRAVIS_BRANCH/artifacts
        - RESULT_PATH=$RESULT_DIRECTORY/$RESULT_FILE
        - STRICT_PLATFORM=windows STRICT_ARCHITECTURE=x86_64 GOOS=windows GOARCH=amd
        - STRICT_PLATFORM=osx STRICT_ARCHITECTURE=x86_64 GOOS=darwin GOARCH=amd
      script:
        - strict_sdk make -p $STRICT_PLATFORM -a $STRICT_ARCHITECTURE -b -o $RESULT_DIRECTORY -v -e $EXECUTABLE_PATH
      deploy:
        provider: releases
        api_key: $GITHUB_OAUTH_TOKEN
        file: $RESULT_PATH
        on:
          tags: true
          all_branches: true
    # Runs all tests.
    - stage: test
      name: test
      script: go test -v -cover ./...
      os: linux
      env: STRICT_PLATFORM=linux STRICT_ARCHITECTURE=x86_64 GOOS=linux GOARCH=amd
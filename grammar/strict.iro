name                   = strict
file_extensions []     = strict;

__KEYWORDS    \= \b(do|method|and|or|in|is|from|downto|return|to|type|for|if|else|yield)(\s|\Z)
__OPERATORS   \= ([+|\-()<>\[\]%*,])
__IDENTIFIER  \= ([a-zA-Z]+[a-zA-Z0-9_]*)
__TYPE_NAME   \= ([\w<>]+)

styles [] {
   .whitespace : style {
      color = #000
      ace_scope = whitespace
      textmate_scope = whitespace
      pygments_scope = Name
   }

   .comment : style {
      color                 = #111
      textmate_scope        = comment
   }

   .keyword : style {
      color     = red
      textmate_scope        = keyword
   }

   .identifier : style {
      color     = black
      textmate_scope        = entity.name
   }

   .variable : style {
      color     = white
      textmate_scope        = variable
   }

   .function_name : style {
      color = pink
      textmate_scope = entity.name.function
   }

   .function_parameter : style {
      color     = black
      textmate_scope        = variable.parameter
   }

   .function_call : style {
      color = pink
      textmate_scope = entity.name.function
   }

   .type : style {
      color = green
      textmate_scope = entity.name.type
   }

   .numeric : style {
      color                 = blue
      textmate_scope        = constant.numeric
   }

   .punctuation : style {
      color     = orange
      textmate_scope        = punctuation
   }

   .text : style {
      color                 = blue
      textmate_scope        = string
   }

   .illegal : style {
      color                 = white
      background_color      = red
      textmate_scope        = invalid
   }
}

contexts [] {
   main : context {
      : include "method";
      : include "method_call";
      : include "assignment";
      : include "loops";
      : pattern {
         regex          \= $${__KEYWORDS}
         styles []       = .keyword;
      }
      : include "numeric";
      : include "identifier";
      : include "operator";
      : inline_push {
         regex         \= (")
         styles []      = .text;
         : pop {
            regex \= (\")
            styles [] = .text;
         }
         : pattern {
            regex      \= (\\(?:\\|"))
            styles [] = .text;
         }
         : pattern {
            regex      \= ([^"\\]+)
            styles [] = .text;
         }
      }
      : inline_push {
         regex          \= (\()
         styles []       = .punctuation;
         : pop {
            regex       \= (\))
            styles []    = .punctuation;
         }
         : include "expression" ;
         : pattern {
            regex       \= (,)
            styles []    = .punctuation;
         }
      }
      : inline_push {
         regex         \= (\<)
         styles []      = .punctuation;
         : pop {
            regex      \= (\>)
            styles []   = .punctuation;
         }
         : include "identifier";
         : pattern {
            regex       \= (,)
            styles []    = .punctuation;
         }
      }
      : include "multi_line_comment" ;
      : pattern {
         regex          \= (//.*)
         styles []       = .comment;
      }
      : pattern {
         regex          \= ([^\s])
         styles []       = .illegal;
      }
   }

   assignment : context {
      : pattern {
         regex \= $${__IDENTIFIER}(\s*)(\=)
         styles [] = .variable, .whitespace, .punctuation;
      }
   }

   loops: context {
      : inline_push {
         regex \=(for)(\s+)$${__IDENTIFIER}(\s+)(from)(\s+)
         styles [] = .keyword, .whitespace, .variable, .whitespace, .keyword, .whitespace;
         : pop {
            regex \= (do)
            styles [] = .keyword;
         }
         : include "main";
      }
      : inline_push {
         regex \=(for)(\s+)$${__IDENTIFIER}(\s+)(in)(\s+)
         styles [] = .keyword, .whitespace, .variable, .whitespace, .keyword, .whitespace;
         : pop {
            regex \= (do)
            styles [] = .keyword;
         }
         : include "main";
      }
   }

   method_call: context {
      : inline_push {
         regex          \= $${__IDENTIFIER}(\s*)(\()
         styles []       = .function_call, .punctuation, .punctuation;
         : pop {
            regex       \= (\))
            styles []    = .punctuation;
         }
         : include "main" ;
         : pattern {
            regex       \= (,)
            styles []    = .punctuation;
         }
      }
   }

   method : context {
      : inline_push {
         regex \= (method)(\s+)$${__TYPE_NAME}(\s+)$${__IDENTIFIER}(\s*)(\()
         styles [] = .keyword, .whitespace, .type, .whitespace, .function_name, .whitespace, .punctuation;
         : pop {
            regex \= (\))
            styles [] = .punctuation;
         }
         : pattern {
            regex \= (\,)
            styles [] = .punctuation;
         }
         : pattern {
            regex \= $${__TYPE_NAME}(\s+)(\w+)
            styles [] = .type, .whitespace, .function_parameter;
         }
         : pattern {
            regex \= $${__TYPE_NAME}
            styles [] = .function_parameter;
         }
      }
   }

   operator : context {
      : pattern {
         regex  \= $${__OPERATORS}
         styles [] = .punctuation;
      }
   }

   expression : context {
      : include "numeric";
      : include "identifier";
      : include "operator";
   }

   keyword : context {
      : pattern {
         regex    \= $${__KEYWORDS}
         styles [] = .keyword;
      }
   }

   numeric : context {
      : pattern {
         regex          \= (\b\d+)
         styles []       = .numeric;
      }
   }

   identifier : context {
      : pattern {
         regex          \= ([a-zA-Z]([a-zA-Z0-9]*))
         styles []       = .identifier;
      }
   }

   multi_line_comment : context {
      description        = multiline
      : inline_push {
         regex          \= (/\*)
         styles []       = .comment;
         default_style   = .comment
         : pop {
            regex       \= (\*/)
            styles []    = .comment;
         }
      }
   }
}

